# -*- coding: utf-8 -*-
"""Forecasting the sales of a supermarket.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wDPzCcjHEQE0epgUTo8TJhuO3FdyLUPZ

**TASK-1**

**Forecasting the sales of a Supermarket**

A supermarket has various departments, and it must
stock up items that will be in demand in
each of these departments. However, while
stocking up, it must make sure that it does
not have excessive stock.
"""

import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA

pip install opendatasets

import opendatasets as od

od.download("https://www.kaggle.com/datasets/rohitsahoo/sales-forecasting")

# Load the dataset
sales_data=pd.read_csv('/content/sales-forecasting/train.csv')

sales_data.head()

sales_data.info()

sales_data.describe()

sales_data.columns

sales_data.shape

# Convert 'Order Date' column to datetime format
sales_data['Order Date']=pd.to_datetime(sales_data['Order Date'])

# Set 'Order Date' as the index
sales_data.set_index('Order Date', inplace=True)

# Group the data by 'Order Date' and calculate the total sales
daily_sales = sales_data['Sales'].resample('D').sum()  # Resample to daily sales

# Resample the data to get monthly sales
monthly_sales = daily_sales.resample('M').sum()

# Plot the monthly sales data
plt.figure(figsize=(10, 6))
plt.plot(monthly_sales, marker='o')
plt.title('Monthly Sales')
plt.xlabel('Date')
plt.ylabel('Sales')
plt.xticks(rotation=45)
plt.show()

# Fit an ARIMA model to the monthly sales data
model = ARIMA(monthly_sales, order=(1, 1, 1))
model_fit = model.fit()

# Forecast future sales for the next 6 months
forecast = model_fit.predict(start=len(monthly_sales), end=len(monthly_sales) + 5)

# Plot the forecasted sales
plt.figure(figsize=(10, 6))
plt.plot(monthly_sales, marker='o', label='Actual Sales')
plt.plot(forecast, marker='o', label='Forecasted Sales')
plt.title('Monthly Sales Forecast')
plt.xlabel('Date')
plt.ylabel('Sales')
plt.xticks(rotation=45)
plt.legend()
plt.show()