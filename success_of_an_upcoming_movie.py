# -*- coding: utf-8 -*-
"""Success of an upcoming movie.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16Ypir96bUAQ9g1Ov4a3sKywAmEqapKCv

**TASK-2**

**Success of an upcoming movie**

For this project, you need to predict the success of an
upcoming movie so that whether or not a
company should go for buying it based on
ROI. To do this, you need to come up with
a model and use the historical data of each.
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, roc_curve, roc_auc_score

pip install opendatasets

import opendatasets as od

# Load the dataset
data=pd.read_csv('/content/movie_success_rate.csv')

data.head()

data.info()

data.describe()

data.columns

data.shape

# Impute missing values in the 'Success' column with the mode value
data['Success'].fillna(data['Success'].mode()[0], inplace=True)

import numpy as np

# Check for infinite values in 'Success' column
print(np.isinf(data['Success']).sum())

# Convert the 'Success' column to int type
data['Success'] = data['Success'].astype(int)

# One-hot encode the 'Genre' column
genre_dummies = data['Genre'].str.get_dummies(sep=',')
genre_dummies.columns = genre_dummies.columns.map(lambda x: 'Genre_' + x)

# Join the one-hot encoded DataFrame back to the original data
data = data.join(genre_dummies)

# Drop unnecessary columns
data.drop(columns=['Title', 'Description', 'Director', 'Actors', 'Year', 'Genre'], inplace=True)

# Split the data into features (X) and target variable (y)
X = data.drop(columns=['Success', 'Revenue (Millions)'])
y = data['Success']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train and evaluate the Logistic Regression model
logistic_model = LogisticRegression()
logistic_model.fit(X_train, y_train)
y_pred_logistic = logistic_model.predict(X_test)
accuracy_logistic = accuracy_score(y_test, y_pred_logistic)

# Train and evaluate the Random Forest Classifier
random_forest_model = RandomForestClassifier()
random_forest_model.fit(X_train, y_train)
y_pred_rf = random_forest_model.predict(X_test)
accuracy_rf = accuracy_score(y_test, y_pred_rf)

# Train and evaluate the Support Vector Machine (SVM) Classifier
svm_model = SVC(probability=True)
svm_model.fit(X_train, y_train)
y_pred_svm = svm_model.predict(X_test)
accuracy_svm = accuracy_score(y_test, y_pred_svm)

# Confusion matrix for Logistic Regression
cm_logistic = confusion_matrix(y_test, y_pred_logistic)
plt.figure(figsize=(5, 5))
sns.heatmap(cm_logistic, annot=True, fmt='d', cmap='Blues', cbar=False)
plt.title('Confusion Matrix - Logistic Regression', fontsize=16)
plt.xlabel('Predicted Labels', fontsize=14)
plt.ylabel('True Labels', fontsize=14)
plt.show()

# ROC curve and AUC score for Logistic Regression
y_prob_logistic = logistic_model.predict_proba(X_test)[:, 1]
fpr_logistic, tpr_logistic, thresholds_logistic = roc_curve(y_test, y_prob_logistic)
roc_auc_logistic = roc_auc_score(y_test, y_prob_logistic)
plt.figure(figsize=(8, 6))
plt.plot(fpr_logistic, tpr_logistic, color='b', lw=2, label='ROC curve (AUC = %0.2f)' % roc_auc_logistic)
plt.plot([0, 1], [0, 1], color='gray', linestyle='--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate', fontsize=14)
plt.ylabel('True Positive Rate', fontsize=14)
plt.title('Receiver Operating Characteristic - Logistic Regression', fontsize=16)
plt.legend(loc="lower right")
plt.show()

# Confusion matrix for Random Forest Classifier
cm_rf = confusion_matrix(y_test, y_pred_rf)
plt.figure(figsize=(5, 5))
sns.heatmap(cm_rf, annot=True, fmt='d', cmap='Greens', cbar=False)
plt.title('Confusion Matrix - Random Forest Classifier', fontsize=16)
plt.xlabel('Predicted Labels', fontsize=14)
plt.ylabel('True Labels', fontsize=14)
plt.show()

# ROC curve and AUC score for Random Forest Classifier
y_prob_rf = random_forest_model.predict_proba(X_test)[:, 1]
fpr_rf, tpr_rf, thresholds_rf = roc_curve(y_test, y_prob_rf)
roc_auc_rf = roc_auc_score(y_test, y_prob_rf)
plt.figure(figsize=(8, 6))
plt.plot(fpr_rf, tpr_rf, color='g', lw=2, label='ROC curve (AUC = %0.2f)' % roc_auc_rf)
plt.plot([0, 1], [0, 1], color='gray', linestyle='--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate', fontsize=14)
plt.ylabel('True Positive Rate', fontsize=14)
plt.title('Receiver Operating Characteristic - Random Forest Classifier', fontsize=16)
plt.legend(loc="lower right")
plt.show()

# Confusion matrix for Support Vector Machine (SVM) Classifier
cm_svm = confusion_matrix(y_test, y_pred_svm)
plt.figure(figsize=(5, 5))
sns.heatmap(cm_svm, annot=True, fmt='d', cmap='Oranges', cbar=False)
plt.title('Confusion Matrix - Support Vector Machine (SVM) Classifier', fontsize=16)
plt.xlabel('Predicted Labels', fontsize=14)
plt.ylabel('True Labels', fontsize=14)
plt.show()

# ROC curve and AUC score for Support Vector Machine (SVM) Classifier
y_prob_svm = svm_model.predict_proba(X_test)[:, 1]
fpr_svm, tpr_svm, thresholds_svm = roc_curve(y_test, y_prob_svm)
roc_auc_svm = roc_auc_score(y_test, y_prob_svm)
plt.figure(figsize=(8, 6))
plt.plot(fpr_svm, tpr_svm, color='orange', lw=2, label='ROC curve (AUC = %0.2f)' % roc_auc_svm)
plt.plot([0, 1], [0, 1], color='gray', linestyle='--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate', fontsize=14)
plt.ylabel('True Positive Rate', fontsize=14)
plt.title('Receiver Operating Characteristic - Support Vector Machine (SVM) Classifier', fontsize=16)
plt.legend(loc="lower right")
plt.show()

# Print the accuracy scores for each model
print("Accuracy - Logistic Regression:", accuracy_logistic)
print("Accuracy - Random Forest Classifier:", accuracy_rf)
print("Accuracy - Support Vector Machine (SVM) Classifier:", accuracy_svm)

"""**Result:** The Random Forest Classifier has the highest accuracy among the three models, with an accuracy of nearly 89.88%. Therefore, the Random Forest Classifier performed the best for predicting the success of upcoming movies based on ROI using the given historical data."""